const WebSocket=require('ws');const crypto=require('crypto');const http=require('http');const server=http.createServer();const wss=new WebSocket.Server({server});const rooms=new Map();function generateRoomCode(){return crypto.randomBytes(3).toString('hex')}function getConnectedUsers(room){return Array.from(room.clients).map(client=>client.username)}wss.on('connection',(ws)=>{let roomCode=null;let username=null;ws.on('message',(message)=>{const data=JSON.parse(message);switch(data.type){case'create':roomCode=generateRoomCode();username=data.username;ws.username=username;rooms.set(roomCode,{host:ws,clients:new Set([ws]),filename:null,state:{playing:false,time:0}});ws.send(JSON.stringify({type:'created',roomCode}));break;case'join':roomCode=data.roomCode;username=data.username;ws.username=username;const room=rooms.get(roomCode);if(room){room.clients.add(ws);broadcastToRoom(roomCode,{type:'userList',users:getConnectedUsers(room)});ws.send(JSON.stringify({type:'joined',filename:room.filename,state:room.state}))}break;case'videoSelected':if(rooms.has(roomCode)){const room=rooms.get(roomCode);room.filename=data.filename;broadcastToRoom(roomCode,{type:'videoUpdate',filename:data.filename},ws)}break;case'videoControl':if(rooms.has(roomCode)){const room=rooms.get(roomCode);room.state={playing:data.action==='play',time:data.time};broadcastToRoom(roomCode,{type:'videoControl',action:data.action,time:data.time},ws)}break}});ws.on('close',()=>{if(roomCode&&rooms.has(roomCode)){const room=rooms.get(roomCode);room.clients.delete(ws);if(room.clients.size===0){rooms.delete(roomCode)}else if(room.host===ws){rooms.delete(roomCode);broadcastToRoom(roomCode,{type:'hostLeft'})}else{broadcastToRoom(roomCode,{type:'userList',users:getConnectedUsers(room)})}}})});function broadcastToRoom(roomCode,message,exclude=null){const room=rooms.get(roomCode);if(room){room.clients.forEach(client=>{if(client!==exclude){client.send(JSON.stringify(message))}})}}server.listen(3000);